# ========================================================================
#                       ENCRYPTION SECTION
# ========================================================================

# Ciphers, are algorithms that define the way of data encryption after successfull authentication
# Only modern algorithms are used

Ciphers aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes128-ctr

# MACs, Message Authentication Codes provide data integrity and authenticity over the session, prevents data tampering
# and packet injection attacks

MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512,hmac-sha2-256

# Key Exchange Algoritms, a way of defining a shared key that will be used by the ciphers to encrypt the session between
# 2 peers. a good algorithm prevents MITM, or guessing the session key.
# Remove the file /etc/ssh/moduli because diffie-hellman algorithms are not used.

KexAlgorithms mlkem768x25519-sha256,sntrup761x25519-sha512,sntrup761x25519-sha512@openssh.com

# A list of supported algorithms used during the KEX init process to identify the server to the client by a public host
# key and a kex signature that was made with the help of the private key
# Remove the ecdsa host key, won't be used anyway with this configuration.

HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256

# This conf defines the minimum length of the RSA key that SSH will offer. the default is 3072 which is weak for
# modern standards, if possible avoid using RSA. The minimum recommended size for supported RSA keys are 4096 and higher
# which will increase security but slower operations.

RequiredRSASize 4096

# A list of public/private key algorithms used for authenticating users, if a user will try to use ecdsa keys to authenticate
# it will fail. only the defines algorithms are supported in this configuration.

PubkeyAcceptedAlgorithms ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256

# A list of accepted algorithms that are used during host based authentication type

HostbasedAcceptedAlgorithms ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256

# Explicitly specified private host key, must have 600 permissions and the algorithm must be allowed in HostKeyAlgorithms
# possible to set the host key to be a public key which will increase security only in case the private keys
# are stored externally on HSM, in that case cryptographic operations related to private keys will be performed
# by the ssh-agent.

HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# ========================================================================
#                       AUTHENTICATION SECTION
# ========================================================================

# Disables the ability to use passwords for authentication which prevents brute force attacks, rainbow tables, and completley
# removes an entire attack surface related to passwords.

PasswordAuthentication no

# In case password authentication is permitted then its recommended to explicitly disable empty password authentication
# this type of authentication does no authenticate users

PermitEmptyPasswords no

# Disables the ability to authenticate as the root user, recommended to use this user locally only and in emergancy scenarios

PermitRootLogin no

# Enables to authenticate users with private/public keys, recommended to use and avoid using passwords

PubkeyAuthentication yes

# This param gives you the ability to specify which authentication methods you want your system to supported

AuthenticationMethods publickey

# Specifies if host based authentication is allowed on the server, explicilty set to no

HostbasedAuthentication no

# ========================================================================
#                       X SECTION
# ========================================================================

# In case the X11 forwarding is enabled, this param states which address should be binded to the x11 server.
# set to yes in order to bind it to the localhost address to block access from outside.

X11UseLocalhost yes

# This param specifies the binary that is used to authenticate X11 connections and provide the COOKIE
# never set to 'none', in that case if the server is accidentally running X11 there will be no authentication 

XAuthLocation /usr/X11R6/bin/xauth

# Only relevant if X11Forwarding is enabled, sets the first avaliable display number

X11DisplayOffset 10

# ========================================================================
#                       FORWARDING SECTION
# ========================================================================

# Allows using SSH to forward X11 traffic, the X11 traffic is wrapped in SSH tunnel, disable this option explicitly 
# to avoid unnecessary connections and traffic.

X11Forwarding no

# Allows to forward ssh agent socket to use private keys remotely, if enabled allows to use the server as an
# intermediate server without exposing private keys, usefull only if the server is ment to be used as an
# intermediate server.

AllowAgentForwarding no

# Allows using the SSH Daemon as a local/remote/dynamic proxy server for TCP traffic, usefull only in case the 
# SSH server is planned to be used as a proxy server. form security perspective recommended to completley 
# disable the feature.

AllowTcpForwarding no

# Very simmilar to TCP forwarding, but refers to UNIX domain sockets represented as files. every socket file is locally
# stored somewhere in the filesystem and belongs to some daemon which offer services. forwarding this type of sockets
# allows users to interact with local sockets.

AllowStreamLocalForwarding no

# A single parameter that disable every forwarding parameter stated above, including ssh-agent/TCP/stream/x11.

DisableForwarding yes


